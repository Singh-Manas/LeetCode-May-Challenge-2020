class Solution {
public:
    void dfs(vector<vector<int>>&image,int sr,int sc,int newColor,int color)
    {
        if(sr<0 || sc<0 || sr>=image.size() || sc>=image[0].size() || image[sr][sc]!=color) //if pixel goes out of bound or it is not same as original colour then simply return
            return;
        image[sr][sc]=newColor;   //change pixel to new colour
        dfs(image,sr-1,sc,newColor,color);  //do a dfs on all 4 directions
        dfs(image,sr+1,sc,newColor,color);
        dfs(image,sr,sc-1,newColor,color);
        dfs(image,sr,sc+1,newColor,color);
        return;
    }
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        if(image.size() && image[sr][sc]!=newColor)
            dfs(image,sr,sc,newColor,image[sr][sc]);  //do dfs only when it is original pixel is not equal to new colour
        return image;
    }
};
